Q.1. Write an Apex Trigger to update the custom field Number_of_Contacts__c on the Account object with the total number of related Contact records

trigger ContactTrigger on Contact (after insert, after update, after delete, after undelete) {
    if (Trigger.isAfter) {
        if (Trigger.isInsert || Trigger.isUpdate || Trigger.isDelete || Trigger.isUndelete) {
            ContactTriggerHandler.updateContactCount(Trigger.new, Trigger.old, Trigger.isInsert, Trigger.isUpdate, Trigger.isDelete, Trigger.isUndelete);
        }
    }
}


public class ContactTriggerHandler {
    public static void updateContactCount(List<Contact> newContacts, List<Contact> oldContacts, Boolean isInsert, Boolean isUpdate, Boolean isDelete, Boolean isUndelete) {
        Set<Id> accountIds = new Set<Id>();
        if (isInsert || isUpdate || isUndelete) {
            for (Contact con : newContacts) {
                if (con.AccountId != null) {
                    accountIds.add(con.AccountId);
                }
            }
        }
        if (isDelete || isUpdate || isUndelete) {
            for (Contact cont : oldContacts) {
                if (cont.AccountId != null) {
                    accountIds.add(cont.AccountId);
                }
            }
        }

        if (!accountIds.isEmpty()) {
            List<Account> accountsToUpdate = List<Account>();

            for (Account acc : [SELECT Id, Number_of_Contacts__c, (SELECT Id FROM Contacts) FROM Account WHERE Id IN :accountIds]) {
                acc.Number_of_Contacts__c = acc.Contacts.size();
                accountsToUpdate.add(acc);
            }
             if (!accountsToUpdate.isEmpty()) {
                update accountsToUpdate;
            }
    }
    
    }
}


Q.2. Write a trigger to prevent the deletion of opportunities that are closed and have associated with OpportunityLineItems.

trigger PreventClosedOpportunityDeletion on Opportunity (before delete) {
    if (Trigger.isBefore && Trigger.isDelete) {
        OpportunityTriggerHandler.PreventClosedOpportunityDeletion(Trigger.old);
    }

}

public class OpportunityTriggerHandler {
    public static void PreventClosedOpportunityDeletion(List<Opportunity> oldOpps) {
        Set<Id> oppIdsToCheck = new Set<Id>();
        Map<Id, Opportunity> closedOppsMap = new Map<Id, Opportunity>();
        for (Opportunity opp : oldOpps) {
            if (opp.IsClosed) {
                oppIdsToCheck.add(opp.Id);
                closedOppsMap.put(opp.Id, opp);
            }
        }
        if (!oppIdsToCheck.isEmpty()) {

            Set<Id> oppsWithProducts = new Set<Id>();
            for (OpportunityLineItem oli : [SELECT OpportunityId FROM OpportunityLineItem WHERE OpportunityId IN :oppIdsToCheck]) {
                oppsWithProducts.add(oli.OpportunityId);
            }
            for (Id oppId : oppsWithProducts) {
                if (closedOppsMap.containsKey(oppId)) {
                    closedOppsMap.get(oppId).addError('You cannot delete this closed opportunity with associated line items.');
                }
            }
        }

    }  
}

Q.3. Write a trigger to update the Account's Last_Contacted_Date__c field with the current date when a new Contact is created or updated.

trigger UpdateLastContactedDate on Contact (after insert, after update) {
    if (Trigger.isAfter && (Trigger.isInsert || Trigger.isUpdate)) {
        ContactTriggerHandler.updateLastContactedDate(Trigger.new);
    }
}

public class ContactTriggerHandler {
    public static void updateLastContactedDate(List<Contact> newContacts) {
        Set<Id> accountIds = new Set<Id>();
        for (Contact con : newContacts) {
            if (con.AccountId != null) {
                accountIds.add(con.AccountId);
            }
        }

        if (!accountIds.isEmpty()) {
            List<Account> accountsToUpdate = new List<Account>();
            for (Account acc : [SELECT Id, Last_Contacted_Date__c FROM Account WHERE Id IN :accountIds]) {
                acc.Last_Contacted_Date__c = System.today();
                accountsToUpdate.add(acc);
            }
            if (!accountsToUpdate.isEmpty()) {
                update accountsToUpdate;
            }
        }
    }  
}

Q.4. Write a trigger to prevent the creation of duplicate Contacts based on the Email field.
trigger PreventDuplicateContacts on Contact (before insert) {
    if (Trigger.isBefore && Trigger.isInsert) {
        ContactTriggerHandler.preventDuplicateContacts(Trigger.new);
    }
}

public class ContactTriggerHandler {
    public static void preventDuplicateContacts(List<Contact> newContacts) {
        Set<String> emailSet = new Set<String>();
        for (Contact con : newContacts) {
            if (con.Email != null) {
                emailSet.add(con.Email.toLowerCase());
            }
        }

        if (!emailSet.isEmpty()) {
            List<Contact> existingContacts = [SELECT Id, Email FROM Contact WHERE Email IN :emailSet];
            Map<String, Contact> existingEmailMap = new Map<String, Contact>();
            for (Contact con : existingContacts) {
                existingEmailMap.put(con.Email.toLowerCase(), con);
            }

            for (Contact con : newContacts) {
                if (con.Email != null && existingEmailMap.containsKey(con.Email.toLowerCase())) {
                    con.addError('A contact with this email already exists: ' + con.Email);
                }
            }
        }
    }  
}

Q.5. Write a trigger whenever a case is created with origin as email then set status as new and Priority as Medium.

trigger SetCaseStatusAndPriority on Case (before insert) {
    if (Trigger.isBefore && Trigger.isInsert) {
        CaseTriggerHandler.setCaseStatusAndPriority(Trigger.new);
    }
}

public class CaseTriggerHandler {
    public static void setCaseStatusAndPriority(List<Case> newCases) {
        for (Case cs : newCases) {
            if (cs.Origin == 'Email') {
                cs.Status = 'New';
                cs.Priority = 'Medium';
            }
        }
    }  
}
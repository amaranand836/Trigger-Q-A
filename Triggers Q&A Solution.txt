Q.1. Write an Apex Trigger to update the custom field Number_of_Contacts__c on the Account object with the total number of related Contact records

trigger ContactTrigger on Contact (after insert, after update, after delete, after undelete) {
    if (Trigger.isAfter) {
        if (Trigger.isInsert || Trigger.isUpdate || Trigger.isDelete || Trigger.isUndelete) {
            ContactTriggerHandler.updateContactCount(Trigger.new, Trigger.old, Trigger.isInsert, Trigger.isUpdate, Trigger.isDelete, Trigger.isUndelete);
        }
    }
}


public class ContactTriggerHandler {
    public static void updateContactCount(List<Contact> newContacts, List<Contact> oldContacts, Boolean isInsert, Boolean isUpdate, Boolean isDelete, Boolean isUndelete) {
        Set<Id> accountIds = new Set<Id>();
        if (isInsert || isUpdate || isUndelete) {
            for (Contact con : newContacts) {
                if (con.AccountId != null) {
                    accountIds.add(con.AccountId);
                }
            }
        }
        if (isDelete || isUpdate || isUndelete) {
            for (Contact cont : oldContacts) {
                if (cont.AccountId != null) {
                    accountIds.add(cont.AccountId);
                }
            }
        }

        if (!accountIds.isEmpty()) {
            List<Account> accountsToUpdate = List<Account>();

            for (Account acc : [SELECT Id, Number_of_Contacts__c, (SELECT Id FROM Contacts) FROM Account WHERE Id IN :accountIds]) {
                acc.Number_of_Contacts__c = acc.Contacts.size();
                accountsToUpdate.add(acc);
            }
             if (!accountsToUpdate.isEmpty()) {
                update accountsToUpdate;
            }
    }
    
    }
}


Q.2. Write a trigger to prevent the deletion of opportunities that are closed and have associated with OpportunityLineItems.

trigger PreventClosedOpportunityDeletion on Opportunity (before delete) {
    if (Trigger.isBefore && Trigger.isDelete) {
        OpportunityTriggerHandler.PreventClosedOpportunityDeletion(Trigger.old);
    }

}

public class OpportunityTriggerHandler {
    public static void PreventClosedOpportunityDeletion(List<Opportunity> oldOpps) {
        Set<Id> oppIdsToCheck = new Set<Id>();
        Map<Id, Opportunity> closedOppsMap = new Map<Id, Opportunity>();
        for (Opportunity opp : oldOpps) {
            if (opp.IsClosed) {
                oppIdsToCheck.add(opp.Id);
                closedOppsMap.put(opp.Id, opp);
            }
        }
        if (!oppIdsToCheck.isEmpty()) {

            Set<Id> oppsWithProducts = new Set<Id>();
            for (OpportunityLineItem oli : [SELECT OpportunityId FROM OpportunityLineItem WHERE OpportunityId IN :oppIdsToCheck]) {
                oppsWithProducts.add(oli.OpportunityId);
            }
            for (Id oppId : oppsWithProducts) {
                if (closedOppsMap.containsKey(oppId)) {
                    closedOppsMap.get(oppId).addError('You cannot delete this closed opportunity with associated line items.');
                }
            }
        }

    }  
}

Q.3. Write a trigger to update the Account's Last_Contacted_Date__c field with the current date when a new Contact is created or updated.

trigger UpdateLastContactedDate on Contact (after insert, after update) {
    if (Trigger.isAfter && (Trigger.isInsert || Trigger.isUpdate)) {
        ContactTriggerHandler.updateLastContactedDate(Trigger.new);
    }
}

public class ContactTriggerHandler {
    public static void updateLastContactedDate(List<Contact> newContacts) {
        Set<Id> accountIds = new Set<Id>();
        for (Contact con : newContacts) {
            if (con.AccountId != null) {
                accountIds.add(con.AccountId);
            }
        }

        if (!accountIds.isEmpty()) {
            List<Account> accountsToUpdate = new List<Account>();
            for (Account acc : [SELECT Id, Last_Contacted_Date__c FROM Account WHERE Id IN :accountIds]) {
                acc.Last_Contacted_Date__c = System.today();
                accountsToUpdate.add(acc);
            }
            if (!accountsToUpdate.isEmpty()) {
                update accountsToUpdate;
            }
        }
    }  
}

Q.4. Write a trigger to prevent the creation of duplicate Contacts based on the Email field.
trigger PreventDuplicateContacts on Contact (before insert) {
    if (Trigger.isBefore && Trigger.isInsert) {
        ContactTriggerHandler.preventDuplicateContacts(Trigger.new);
    }
}

public class ContactTriggerHandler {
    public static void preventDuplicateContacts(List<Contact> newContacts) {
        Set<String> emailSet = new Set<String>();
        for (Contact con : newContacts) {
            if (con.Email != null) {
                emailSet.add(con.Email.toLowerCase());
            }
        }

        if (!emailSet.isEmpty()) {
            List<Contact> existingContacts = [SELECT Id, Email FROM Contact WHERE Email IN :emailSet];
            Map<String, Contact> existingEmailMap = new Map<String, Contact>();
            for (Contact con : existingContacts) {
                existingEmailMap.put(con.Email.toLowerCase(), con);
            }

            for (Contact con : newContacts) {
                if (con.Email != null && existingEmailMap.containsKey(con.Email.toLowerCase())) {
                    con.addError('A contact with this email already exists: ' + con.Email);
                }
            }
        }
    }  
}

Q.5. Write a trigger whenever a case is created with origin as email then set status as new and Priority as Medium.

trigger SetCaseStatusAndPriority on Case (before insert) {
    if (Trigger.isBefore && Trigger.isInsert) {
        CaseTriggerHandler.setCaseStatusAndPriority(Trigger.new);
    }
}

public class CaseTriggerHandler {
    public static void setCaseStatusAndPriority(List<Case> newCases) {
        for (Case cs : newCases) {
            if (cs.Origin == 'Email') {
                cs.Status = 'New';
                cs.Priority = 'Medium';
            }
        }
    }  
}

Q.6. Scenario: Update Case Count on Account Based on Case Record Type
You are working on a Salesforce org where Accounts can have multiple Cases related to them. These cases can be of different types, such as:

Technical_Support
Customer_Complaint

Each of these is defined using Record Types on the Case object.
Your client wants to track the number of cases for each type directly on the Account record using two custom number fields:

Technical_Support_Cases__c (Number field on Account)
Customer_Complaint_Cases__c (Number field on Account)

trigger CaseCountTrigger on Case (after insert, after update, after delete, after undelete) {
    if (Trigger.isInsert || Trigger.isUpdate || Trigger.isDelete || Trigger.isUndelete) {
        CaseCountHandler.updateAccountCaseCounts(Trigger.new, Trigger.old, Trigger.isInsert, Trigger.isUpdate, Trigger.isDelete, Trigger.isUndelete);
    }
}

public class CaseCountHandler {
    public static void updateAccountCaseCounts(List<Case> newCases, List<Case> oldCases, Boolean isInsert, Boolean isUpdate, Boolean isDelete, Boolean isUndelete) {
        Set<Id> accountIds = new Set<Id>();

        // Collect AccountIds from new and old cases
        if (isInsert || isUpdate || isUndelete) {
            for (Case cs : newCases) {
                if (cs.AccountId != null) {
                    accountIds.add(cs.AccountId);
                }
            }
        }

        if (isDelete || isUpdate || isUndelete) {
            for (Case cs : oldCases) {
                if (cs.AccountId != null) {
                    accountIds.add(cs.AccountId);
                }
            }
        }

        // If no accounts to update, exit early
        if (accountIds.isEmpty()) return;

        // Aggregate count of cases by AccountId and RecordTypeId
        AggregateResult[] groupedResults = [
            SELECT AccountId, RecordTypeId, COUNT(Id) caseCount
            FROM Case
            WHERE AccountId IN :accountIds
            GROUP BY AccountId, RecordTypeId
        ];

        // Map to hold account updates
        Map<Id, Account> accountsMap = new Map<Id, Account>();

        // Initialize the account map with existing account data
        for (Account acc : [SELECT Id, Technical_Support_Cases__c, Customer_Complaint_Cases__c FROM Account WHERE Id IN :accountIds]) {
            accountsMap.put(acc.Id, acc);
        }

        // Loop through AggregateResult and update the account fields
        for (AggregateResult ar : groupedResults) {
            Id accId = (Id) ar.get('AccountId');
            Id rtId = (Id) ar.get('RecordTypeId');
            Integer count = (Integer) ar.get('caseCount');

            // Get the RecordTypeName dynamically
            String rtName = Schema.SObjectType.Case.getRecordTypeInfosById().get(rtId).getName();

            Account acc = accountsMap.get(accId);

            // Update the custom fields based on RecordType
            if (rtName == 'Technical_Support') {
                acc.Technical_Support_Cases__c = count;
            } else if (rtName == 'Customer_Complaint') {
                acc.Customer_Complaint_Cases__c = count;
            }
        }

        // Update the accounts in one DML statement
        update accountsMap.values();
    }
}

